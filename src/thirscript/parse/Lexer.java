/* The following code was generated by JFlex 1.7.0 */

package thirscript.parse;

import thirscript.parse.Token.TokenType;

import java.io.IOException;
import java.util.Iterator;

/**
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a>
 * 1.7.0 from the specification file <tt>Lexer.flex</tt>
 */
public final class Lexer
{

	/** This character denotes the end of file */
	public static final int YYEOF = -1;

	/** initial size of the lookahead buffer */
	private static final int ZZ_BUFFERSIZE = 16384;

	/** lexical states */
	public static final int YYINITIAL = 0;
	public static final int STRING = 2;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
	 * beginning of a line l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = {0, 0, 1, 1};

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED = "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\36\1\21"
			+ "\1\26\1\0\1\35\1\35\1\37\1\27\1\30\1\5\1\35\1\23" + "\1\35\1\22\1\4\1\10\11\7\1\25\1\0\1\36\1\24\1\36"
			+ "\2\0\32\6\1\33\1\40\1\34\1\35\1\6\1\0\4\6\1\13" + "\1\12\1\6\1\17\1\11\2\6\1\14\1\6\1\20\3\6\1\42"
			+ "\1\15\1\41\2\6\1\16\3\6\1\31\1\35\1\32\1\35\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff91\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\2\0\3\1\2\2\1\3\2\4\4\3\1\5\1\6"
			+ "\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\15" + "\1\16\1\17\1\2\1\20\1\21\1\22\1\1\1\0"
			+ "\1\23\3\3\1\24\1\25\1\26\1\27\1\30\2\0" + "\2\3\1\31\1\0\1\32\1\3\1\33";

	private static int[] zzUnpackAction()
	{
		int[] result = new int[50];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result)
	{
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while(i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while(--count > 0);
		}
		return j;
	}

	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\43\0\106\0\151\0\214\0\257\0\106\0\322"
			+ "\0\365\0\106\0\u0118\0\u013b\0\u015e\0\u0181\0\106\0\106"
			+ "\0\106\0\u01a4\0\u01c7\0\106\0\106\0\106\0\106\0\106"
			+ "\0\106\0\106\0\u01a4\0\u01ea\0\106\0\u020d\0\u0230\0\u0253"
			+ "\0\322\0\u0276\0\u0299\0\u02bc\0\106\0\106\0\106\0\106"
			+ "\0\106\0\u02df\0\u0302\0\u0325\0\u0348\0\322\0\u036b\0\322" + "\0\u038e\0\322";

	private static int[] zzUnpackRowMap()
	{
		int[] result = new int[50];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result)
	{
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while(i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 = "\1\3\1\4\1\3\1\5\1\6\1\7\1\10\1\11"
			+ "\1\12\1\13\1\10\1\14\2\10\1\15\1\10\1\16" + "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"
			+ "\1\27\1\30\1\31\1\32\1\7\1\33\2\3\2\10" + "\37\34\1\35\1\36\2\34\45\0\1\3\43\0\1\5"
			+ "\43\0\1\37\1\40\43\0\13\10\20\0\2\10\7\0" + "\2\11\40\0\4\10\1\41\6\10\20\0\2\10\6\0"
			+ "\6\10\1\42\4\10\20\0\2\10\6\0\11\10\1\43" + "\1\10\20\0\2\10\6\0\5\10\1\44\5\10\20\0"
			+ "\2\10\24\0\1\7\42\0\1\45\16\0\37\34\2\0" + "\2\34\20\0\1\46\16\0\1\47\1\0\1\50\1\51"
			+ "\1\37\1\4\1\3\40\37\5\52\1\53\35\52\6\0" + "\7\10\1\54\3\10\20\0\2\10\6\0\3\10\1\55"
			+ "\7\10\20\0\2\10\6\0\10\10\1\56\2\10\20\0" + "\2\10\5\52\1\57\35\52\4\0\1\3\1\53\43\0"
			+ "\5\10\1\60\5\10\20\0\2\10\6\0\6\10\1\61" + "\4\10\20\0\2\10\4\52\1\3\1\57\35\52\6\0"
			+ "\5\10\1\62\5\10\20\0\2\10";

	private static int[] zzUnpackTrans()
	{
		int[] result = new int[945];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result)
	{
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while(i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do
				result[j++] = value;
			while(--count > 0);
		}
		return j;
	}

	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = {"Unknown internal scanner error", "Error: could not match input",
			"Error: pushback value was too large"};

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\2\0\1\11\3\1\1\11\2\1\1\11\4\1\3\11"
			+ "\2\1\7\11\2\1\1\11\2\1\1\0\4\1\5\11" + "\2\0\3\1\1\0\3\1";

	private static int[] zzUnpackAttribute()
	{
		int[] result = new int[50];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result)
	{
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while(i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while(--count > 0);
		}
		return j;
	}

	/** the input device */
	private java.io.Reader zzReader;

	/** the current state of the DFA */
	private int zzState;

	/** the current lexical state */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is the source of the
	 * yytext() string
	 */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

	/** the textposition at the last accepting state */
	private int zzMarkedPos;

	/** the current text position in the buffer */
	private int zzCurrentPos;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read from input
	 */
	private int zzEndRead;

	/** number of newlines encountered up to the start of the matched text */
	private int yyline;

	/**
	 * the number of characters from the last newline up to the start of the matched
	 * text
	 */
	private int yycolumn;

	/** zzAtEOF == true iff the scanner is at the EOF */
	private boolean zzAtEOF;

	/** denotes if the user-EOF-code has already been executed */
	private boolean zzEOFDone;

	/**
	 * The number of occupied positions in zzBuffer beyond zzEndRead. When a
	 * lead/high surrogate has been read from the input stream into the final
	 * zzBuffer position, this will have a value of 1; otherwise, it will have a
	 * value of 0.
	 */
	private int zzFinalHighSurrogate = 0;

	/* user code: */

	StringBuilder string = new StringBuilder();

	private Token token(TokenType type)
	{
		return new Token(type, yyline, yycolumn);
	}

	private Token text_token(TokenType type)
	{
		return new Token(type, yyline, yycolumn, yytext());
	}

	private Token text_token(TokenType type, String text)
	{
		return new Token(type, yyline, yycolumn, text);
	}

	public Iterator<Token> iterator()
	{
		return new Iterator<Token>()
		{
			@Override
			public boolean hasNext()
			{
				return !zzEOFDone;
			}

			@Override
			public Token next()
			{
				try {
					return yylex();
				}
				catch(IOException e) {
					e.printStackTrace();
					return Token.EOF;
				}
			}
		};
	}

	/**
	 * Creates a new scanner
	 *
	 * @param in the java.io.Reader to read input from.
	 */
	public Lexer(java.io.Reader in)
	{
		this.zzReader = in;
	}

	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed)
	{
		char[] map = new char[0x110000];
		int i = 0; /* index in packed string */
		int j = 0; /* index in unpacked array */
		while(i < 152) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do
				map[j++] = value;
			while(--count > 0);
		}
		return map;
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return <code>false</code>, iff there was new input.
	 * 
	 * @exception java.io.IOException if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException
	{

		/* first: make room (if you can) */
		if(zzStartRead > 0) {
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
			System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if(zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
			/* if not: blow it up */
			char newBuffer[] = new char[zzBuffer.length * 2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
		}

		/* fill the buffer with new input */
		int requested = zzBuffer.length - zzEndRead;
		int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

		/* not supposed to occur according to specification of java.io.Reader */
		if(numRead == 0) {
			throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
		}
		if(numRead > 0) {
			zzEndRead += numRead;
			/*
			 * If numRead == requested, we might have requested to few chars to encode a
			 * full Unicode character. We assume that a Reader would otherwise never return
			 * half characters.
			 */
			if(numRead == requested) {
				if(Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
					--zzEndRead;
					zzFinalHighSurrogate = 1;
				}
			}
			/* potentially more input available */
			return false;
		}

		/* numRead < 0 ==> end of stream */
		return true;
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException
	{
		zzAtEOF = true; /* indicate end of file */
		zzEndRead = zzStartRead; /* invalidate buffer */

		if(zzReader != null)
			zzReader.close();
	}

	/**
	 * Resets the scanner to read from a new input stream. Does not close the old
	 * reader.
	 *
	 * All internal variables are reset, the old input stream <b>cannot</b> be
	 * reused (internal buffer is discarded and lost). Lexical state is set to
	 * <tt>ZZ_INITIAL</tt>.
	 *
	 * Internal scan buffer is resized down to its initial length, if it has grown.
	 *
	 * @param reader the new input stream
	 */
	public final void yyreset(java.io.Reader reader)
	{
		zzReader = reader;
		zzAtEOF = false;
		zzEOFDone = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = 0;
		zzFinalHighSurrogate = 0;
		yyline = yycolumn = 0;
		zzLexicalState = YYINITIAL;
		if(zzBuffer.length > ZZ_BUFFERSIZE)
			zzBuffer = new char[ZZ_BUFFERSIZE];
	}

	/**
	 * Returns the current lexical state.
	 */
	public final int yystate()
	{
		return zzLexicalState;
	}

	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState)
	{
		zzLexicalState = newState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext()
	{
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the matched text.
	 * 
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch. A value from 0 to
	 *            yylength()-1.
	 *
	 * @return the character at position pos
	 */
	public final char yycharat(int pos)
	{
		return zzBuffer[zzStartRead + pos];
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength()
	{
		return zzMarkedPos - zzStartRead;
	}

	/**
	 * Reports an error that occured while scanning.
	 *
	 * In a wellformed scanner (no or only correct usage of yypushback(int) and a
	 * match-all fallback rule) this method will only be called with things that
	 * "Can't Possibly Happen". If this method is called, something is seriously
	 * wrong (e.g. a JFlex bug producing a faulty scanner etc.).
	 *
	 * Usual syntax/scanner level error handling should be done in error fallback
	 * rules.
	 *
	 * @param errorCode the code of the errormessage to display
	 */
	private void zzScanError(int errorCode)
	{
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		}
		catch(ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 *
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number the number of characters to be read again. This number must not
	 *               be greater than yylength()!
	 */
	public void yypushback(int number)
	{
		if(number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}

	/**
	 * Resumes scanning until the next regular expression is matched, the end of
	 * input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @exception java.io.IOException if any I/O-Error occurs
	 */
	public Token yylex() throws java.io.IOException
	{
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while(true) {
			zzMarkedPosL = zzMarkedPos;

			boolean zzR = false;
			int zzCh;
			int zzCharCount;
			for(zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL += zzCharCount) {
				zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
				zzCharCount = Character.charCount(zzCh);
				switch(zzCh) {
				case '\u000B': // fall through
				case '\u000C': // fall through
				case '\u0085': // fall through
				case '\u2028': // fall through
				case '\u2029':
					yyline++;
					yycolumn = 0;
					zzR = false;
					break;
				case '\r':
					yyline++;
					yycolumn = 0;
					zzR = true;
					break;
				case '\n':
					if(zzR)
						zzR = false;
					else {
						yyline++;
						yycolumn = 0;
					}
					break;
				default:
					zzR = false;
					yycolumn += zzCharCount;
				}
			}

			if(zzR) {
				// peek one character ahead if it is \n (if we have counted one line too much)
				boolean zzPeek;
				if(zzMarkedPosL < zzEndReadL)
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				else if(zzAtEOF)
					zzPeek = false;
				else {
					boolean eof = zzRefill();
					zzEndReadL = zzEndRead;
					zzMarkedPosL = zzMarkedPos;
					zzBufferL = zzBuffer;
					if(eof)
						zzPeek = false;
					else
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				}
				if(zzPeek)
					yyline--;
			}
			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			// set up zzAction for empty match case:
			int zzAttributes = zzAttrL[zzState];
			if((zzAttributes & 1) == 1) {
				zzAction = zzState;
			}

			zzForAction: {
				while(true) {

					if(zzCurrentPosL < zzEndReadL) {
						zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
						zzCurrentPosL += Character.charCount(zzInput);
					}
					else if(zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					}
					else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if(eof) {
							zzInput = YYEOF;
							break zzForAction;
						}
						else {
							zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
							zzCurrentPosL += Character.charCount(zzInput);
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if(zzNext == -1)
						break zzForAction;
					zzState = zzNext;

					zzAttributes = zzAttrL[zzState];
					if((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if((zzAttributes & 8) == 8)
							break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			if(zzInput == YYEOF && zzStartRead == zzCurrentPos) {
				zzAtEOF = true;
				{
					return Token.EOF;
				}
			}
			else {
				switch(zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
				case 1: {
				}
				// fall through
				case 28:
					break;
				case 2: {
					return text_token(TokenType.OP);
				}
				// fall through
				case 29:
					break;
				case 3: {
					return text_token(TokenType.IDENTIFIER);
				}
				// fall through
				case 30:
					break;
				case 4: {
					return text_token(TokenType.INT);
				}
				// fall through
				case 31:
					break;
				case 5: {
					string.setLength(0);
					yybegin(STRING);
				}
				// fall through
				case 32:
					break;
				case 6: {
					return token(TokenType.PERIOD);
				}
				// fall through
				case 33:
					break;
				case 7: {
					return token(TokenType.COMMA);
				}
				// fall through
				case 34:
					break;
				case 8: {
					return token(TokenType.ASSIGN);
				}
				// fall through
				case 35:
					break;
				case 9: {
					return token(TokenType.FUNC);
				}
				// fall through
				case 36:
					break;
				case 10: {
					return token(TokenType.LPAREN);
				}
				// fall through
				case 37:
					break;
				case 11: {
					return token(TokenType.RPAREN);
				}
				// fall through
				case 38:
					break;
				case 12: {
					return token(TokenType.LBRACE);
				}
				// fall through
				case 39:
					break;
				case 13: {
					return token(TokenType.RBRACE);
				}
				// fall through
				case 40:
					break;
				case 14: {
					return token(TokenType.LBRACKET);
				}
				// fall through
				case 41:
					break;
				case 15: {
					return token(TokenType.RBRACKET);
				}
				// fall through
				case 42:
					break;
				case 16: {
					string.append(yytext());
				}
				// fall through
				case 43:
					break;
				case 17: {
					yybegin(YYINITIAL);
					return text_token(TokenType.STRING, string.toString());
				}
				// fall through
				case 44:
					break;
				case 18: {
					string.append('\\');
				}
				// fall through
				case 45:
					break;
				case 19: {
					return token(TokenType.IF);
				}
				// fall through
				case 46:
					break;
				case 20: {
					return token(TokenType.ASSIGNC);
				}
				// fall through
				case 47:
					break;
				case 21: {
					string.append('\n');
				}
				// fall through
				case 48:
					break;
				case 22: {
					string.append('\'');
				}
				// fall through
				case 49:
					break;
				case 23: {
					string.append('\t');
				}
				// fall through
				case 50:
					break;
				case 24: {
					string.append('\r');
				}
				// fall through
				case 51:
					break;
				case 25: {
					return token(TokenType.NEW);
				}
				// fall through
				case 52:
					break;
				case 26: {
					return token(TokenType.ELSE);
				}
				// fall through
				case 53:
					break;
				case 27: {
					return token(TokenType.WHILE);
				}
				// fall through
				case 54:
					break;
				default:
					zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}

}
